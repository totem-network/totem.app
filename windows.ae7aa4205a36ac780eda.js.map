{"version":3,"sources":["webpack:///./app/src/app/containers/applications/Windows.ts","webpack:///./app/src/app/components/applications/Windows.tsx"],"names":["mapStateToProps","state","instances","Object","applications__WEBPACK_IMPORTED_MODULE_0__","showTaskManager","windows","mapDispatchToProps","dispatch","redux__WEBPACK_IMPORTED_MODULE_2__","react_redux__WEBPACK_IMPORTED_MODULE_1__","_components_applications_Windows__WEBPACK_IMPORTED_MODULE_3__","__webpack_exports__","Windows","props","context","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default","call","changing","startChange","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_7___default","finishChange","setState","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_1___default","_this$props","_this$props$classes","classes","container","containerNoPointerEvents","containerClass","classnames__WEBPACK_IMPORTED_MODULE_10___default","_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default","getFocusedIndex","react__WEBPACK_IMPORTED_MODULE_13___default","a","createElement","className","renderWindows","renderHomeButton","_this2","_this$props2","focusedIndex","orderedWindows","forEach","window","index","instance","immutable__WEBPACK_IMPORTED_MODULE_12__","sort","b","localeCompare","map","focused","minimized","offset","taskStyle","sortedIndex","left","top","WindowComponent","getWindowComponent","react__WEBPACK_IMPORTED_MODULE_13__","key","task","windowHeight","height","windowWidth","width","x","y","zIndex","renderTaskInfo","instanceId","find","id","application","filesystem__WEBPACK_IMPORTED_MODULE_11__","applications__WEBPACK_IMPORTED_MODULE_9__","_this$props3","taskInstance","icon","themeColor","title","findLastIndex","style","overflow","position","pointerEvents","windowContainer","_material_ui_core_styles_withStyles__WEBPACK_IMPORTED_MODULE_8___default"],"mappings":"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","file":"windows.ae7aa4205a36ac780eda.js","sourcesContent":["import {\n    instancesSelector,\n    taskManagerSelector,\n    windowsSelector,\n } from 'applications';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport Windows from './../../components/applications/Windows';\n\nconst mapStateToProps = (state: any) => {\n    return {\n        instances: instancesSelector(state),\n        showTaskManager: taskManagerSelector(state).showTaskManager,\n        windows: windowsSelector(state),\n    };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return bindActionCreators({}, dispatch);\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Windows as any);\n","import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\nimport { ApplicationWindow, HomeButton, TaskTitle } from 'applications';\nimport classNames from 'classnames';\nimport {\n    APPLICATION_ID as FILESYSTEM_APPLICATION_ID,\n    FileSystemWindow,\n} from 'filesystem';\nimport { List } from 'immutable';\nimport React, { Component, Fragment } from 'react';\n\ninterface IInstance {\n    application: string;\n    icon: string;\n    id: string;\n    themeColor: string;\n    title: string;\n}\n\ninterface IWindow {\n    height: number;\n    minimized: boolean;\n    instance: string;\n    width: number;\n    x: number;\n    y: number;\n}\n\ninterface IWindowsProps {\n    instances: IInstance[];\n    showTaskManager: boolean;\n    windows: IWindow[];\n}\n\ninterface IWindowsState {\n    changing: boolean;\n}\n\ntype WindowsProps = IWindowsProps & WithStyles;\n\nclass Windows extends Component<WindowsProps, IWindowsState> {\n\n    constructor(props: WindowsProps, context?: any) {\n        super(props, context);\n\n        this.state = {\n            changing: false,\n        };\n\n        this.startChange = this.startChange.bind(this);\n        this.finishChange = this.finishChange.bind(this);\n    }\n\n    public startChange() {\n        this.setState({\n            ...this.state,\n            changing: true,\n        });\n    }\n\n    public finishChange() {\n        this.setState({\n            ...this.state,\n            changing: false,\n        });\n    }\n\n    public render() {\n        const { showTaskManager, windows } = this.props;\n        const { container, containerNoPointerEvents } = this.props.classes;\n\n        const containerClass = classNames(\n            container,\n            {\n                [containerNoPointerEvents]: (\n                    this.getFocusedIndex(windows) === -1 &&\n                    !showTaskManager\n                ),\n            },\n        );\n\n        return (\n            <div className={containerClass}>\n                {this.renderWindows()}\n                {this.renderHomeButton()}\n            </div>\n        );\n    }\n\n    protected renderWindows() {\n        const { showTaskManager, windows } = this.props;\n        const { changing } = this.state;\n\n        const focusedIndex = this.getFocusedIndex(windows);\n\n        const orderedWindows: any = {};\n\n        windows.forEach((window: IWindow, index: number) => {\n            orderedWindows[window.instance] = index;\n        });\n\n        return List(windows).sort((a: IWindow, b: IWindow) => {\n            // sorting by instance is required to prevent reloading of applications iframe\n            // to change the order in the view change the orderedWindows object\n            return a.instance.localeCompare(b.instance);\n        }).map((window) => {\n            if (!window) {\n                return null;\n            }\n\n            let focused: boolean = false;\n            if (focusedIndex === orderedWindows[window.instance]) {\n                focused = true;\n            }\n\n            let minimized = window.minimized;\n            let offset = 0;\n            let taskStyle = {};\n\n            if (showTaskManager) {\n                minimized = false;\n                focused = true;\n\n                // TODO: replace focusedIndex with index from sorted windows\n                let sortedIndex = focusedIndex;\n                if (focusedIndex === -1) {\n                    sortedIndex = 0;\n                }\n\n                offset = orderedWindows[window.instance] - sortedIndex;\n\n                taskStyle = {\n                    left: offset * 75 + 'vw',\n                    top: '-5vh',\n                };\n            }\n\n            // TODO: switch if ApplicationWindow / FileSystemWindow / ...\n            const WindowComponent = this.getWindowComponent(window.instance);\n\n            return (\n                <Fragment key={window.instance}>\n                    <WindowComponent\n                        changing={changing}\n                        finishChange={this.finishChange}\n                        focused={focused}\n                        instance={window.instance}\n                        minimized={minimized}\n                        startChange={this.startChange}\n                        task={showTaskManager}\n                        taskStyle={taskStyle}\n                        windowHeight={window.height}\n                        windowWidth={window.width}\n                        x={window.x}\n                        y={window.y}\n                        zIndex={orderedWindows[window.instance]}\n                    />\n                    {this.renderTaskInfo(window.instance, offset)}\n                </Fragment>\n            );\n        });\n    }\n\n    protected getWindowComponent(instanceId: string) {\n        const { instances } = this.props;\n\n        // TODO: instances list as a protected property which updates when instances changes for better performance\n        const windowInstance = List(instances).find((instance) => {\n            if (!instance) {\n                return false;\n            }\n\n            return (instance.id === instanceId);\n        });\n\n        switch (windowInstance.application) {\n            case FILESYSTEM_APPLICATION_ID:\n                return FileSystemWindow;\n            default:\n                return ApplicationWindow;\n        }\n    }\n\n    protected renderTaskInfo(instanceId: string, offset: number) {\n        const { instances, showTaskManager } = this.props;\n\n        // TODO: instances list as a protected property which updates when instances changes for better performance\n        const taskInstance = List(instances).find((instance) => {\n            if (!instance) {\n                return false;\n            }\n\n            return (instance.id === instanceId);\n        });\n\n        if (!showTaskManager || !taskInstance) {\n            return null;\n        }\n\n        return (\n            <TaskTitle\n                icon={taskInstance.icon}\n                offset={offset}\n                themeColor={taskInstance.themeColor}\n                title={taskInstance.title}\n            />\n        );\n    }\n\n    protected renderHomeButton() {\n        return this.props.showTaskManager ? (\n            <HomeButton />\n        ) : null;\n    }\n\n    protected getFocusedIndex(windows: IWindow[]) {\n        return List(windows).findLastIndex((window?: IWindow) => {\n            if (!window) {\n                return false;\n            }\n\n            return !window.minimized;\n        });\n    }\n}\n\nconst style: StyleRules = {\n    container: {\n        height: '100%',\n        overflow: 'hidden',\n        position: 'absolute',\n        width: '100%',\n    },\n    containerNoPointerEvents: {\n        pointerEvents: 'none',\n    },\n    windowContainer: {\n        height: '100%',\n        width: '100%',\n    },\n};\n\nexport default withStyles(style)(Windows);\n"],"sourceRoot":""}